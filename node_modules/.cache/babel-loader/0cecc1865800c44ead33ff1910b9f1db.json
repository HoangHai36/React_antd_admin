{"ast":null,"code":"var _jsxFileName = \"D:\\\\mock-reactjs\\\\frontend-new\\\\src\\\\components\\\\UpdateForm\\\\index.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from \"react\";\nimport dayjs from \"dayjs\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { crud } from \"@/redux/crud/actions\";\nimport { selectReadItem } from \"@/redux/crud/selectors\";\nimport { useParams } from 'react-router-dom';\nimport { Button, Form } from \"antd\";\nimport Loading from \"@/components/Loading\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function UpdateForm(_ref) {\n  _s();\n\n  let {\n    config,\n    formElements\n  } = _ref;\n  let {\n    entity\n  } = config;\n  const dispatch = useDispatch();\n  const {\n    read,\n    isLoading,\n    isSuccess\n  } = useSelector(selectReadItem);\n  const [form] = Form.useForm();\n  const params = useParams();\n\n  const onSubmit = fieldsValue => {\n    // if (fieldsValue) {\n    //   if (fieldsValue.birthday) {\n    //     fieldsValue = {\n    //       ...fieldsValue,\n    //       birthday: fieldsValue[\"birthday\"].format(\"DD/MM/YYYY\"),\n    //     };\n    //   }\n    //   if (fieldsValue.date) {\n    //     fieldsValue = {\n    //       ...fieldsValue,\n    //       birthday: fieldsValue[\"date\"].format(\"DD/MM/YYYY\"),\n    //     };\n    //   }\n    // }\n    const id = current._id;\n    dispatch(crud.update(entity, id, fieldsValue));\n  };\n\n  useEffect(() => {\n    dispatch(crud.read('userItem', params === null || params === void 0 ? void 0 : params.id));\n    console.log(read);\n\n    if (read) {\n      form.setFieldsValue(read);\n    }\n\n    console.log(form);\n  }, [read]);\n  const handelDataTableLoad = useCallback(() => {\n    dispatch(crud.read('userItem', params === null || params === void 0 ? void 0 : params.id));\n  }, []);\n  useEffect(() => {\n    if (isSuccess) {\n      form.resetFields(); // dispatch(crud.resetAction(\"update\"));\n      // dispatch(crud.list(entity));\n    }\n  }, [isSuccess]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Loading, {\n      isLoading: isLoading,\n      children: /*#__PURE__*/_jsxDEV(Form, {\n        form: form,\n        layout: \"vertical\",\n        onFinish: onSubmit,\n        onChange: handelDataLoad,\n        children: [formElements, /*#__PURE__*/_jsxDEV(Form.Item, {\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            type: \"primary\",\n            htmlType: \"submit\",\n            children: \"Submit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n}\n\n_s(UpdateForm, \"/rN59Md93TeNpeYaytVMoJ02LBQ=\", false, function () {\n  return [useDispatch, useSelector, Form.useForm, useParams];\n});\n\n_c = UpdateForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"UpdateForm\");","map":{"version":3,"names":["React","useEffect","dayjs","useDispatch","useSelector","crud","selectReadItem","useParams","Button","Form","Loading","UpdateForm","config","formElements","entity","dispatch","read","isLoading","isSuccess","form","useForm","params","onSubmit","fieldsValue","id","current","_id","update","console","log","setFieldsValue","handelDataTableLoad","useCallback","resetFields","handelDataLoad"],"sources":["D:/mock-reactjs/frontend-new/src/components/UpdateForm/index.jsx"],"sourcesContent":["import React, { useEffect } from \"react\";\r\nimport dayjs from \"dayjs\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { crud } from \"@/redux/crud/actions\";\r\nimport { selectReadItem } from \"@/redux/crud/selectors\";\r\nimport { useParams } from 'react-router-dom';\r\nimport { Button, Form } from \"antd\";\r\nimport Loading from \"@/components/Loading\";\r\n\r\nexport default function UpdateForm({ config, formElements }) {\r\n  let { entity } = config;\r\n  const dispatch = useDispatch();\r\n  const { read, isLoading, isSuccess } = useSelector(selectReadItem);\r\n  const [form] = Form.useForm();\r\n  const params = useParams();\r\n  const onSubmit = (fieldsValue) => {\r\n    // if (fieldsValue) {\r\n    //   if (fieldsValue.birthday) {\r\n    //     fieldsValue = {\r\n    //       ...fieldsValue,\r\n    //       birthday: fieldsValue[\"birthday\"].format(\"DD/MM/YYYY\"),\r\n    //     };\r\n    //   }\r\n    //   if (fieldsValue.date) {\r\n    //     fieldsValue = {\r\n    //       ...fieldsValue,\r\n    //       birthday: fieldsValue[\"date\"].format(\"DD/MM/YYYY\"),\r\n    //     };\r\n    //   }\r\n    // }\r\n\r\n    const id = current._id;\r\n    dispatch(crud.update(entity, id, fieldsValue));\r\n  };\r\n  useEffect(() => {\r\n    dispatch(crud.read('userItem', params?.id));\r\n    console.log(read)\r\n    if(read) {\r\n      form.setFieldsValue(read);\r\n    }\r\n    console.log(form)\r\n  }, [read]);\r\n  const handelDataTableLoad = useCallback(() => {\r\n    dispatch(crud.read('userItem', params?.id));\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (isSuccess) {\r\n      form.resetFields();\r\n      // dispatch(crud.resetAction(\"update\"));\r\n      // dispatch(crud.list(entity));\r\n    }\r\n  }, [isSuccess]);\r\n\r\n\r\n  return (\r\n    <div>\r\n      <Loading isLoading={isLoading}>\r\n        <Form form={form} layout=\"vertical\" onFinish={onSubmit}  onChange={handelDataLoad}>\r\n          {formElements}\r\n          <Form.Item>\r\n            <Button type=\"primary\" htmlType=\"submit\">\r\n              Submit\r\n            </Button>\r\n          </Form.Item>\r\n        </Form>\r\n      </Loading>\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,IAAT,QAAqB,sBAArB;AACA,SAASC,cAAT,QAA+B,wBAA/B;AACA,SAASC,SAAT,QAA0B,kBAA1B;AACA,SAASC,MAAT,EAAiBC,IAAjB,QAA6B,MAA7B;AACA,OAAOC,OAAP,MAAoB,sBAApB;;AAEA,eAAe,SAASC,UAAT,OAA8C;EAAA;;EAAA,IAA1B;IAAEC,MAAF;IAAUC;EAAV,CAA0B;EAC3D,IAAI;IAAEC;EAAF,IAAaF,MAAjB;EACA,MAAMG,QAAQ,GAAGZ,WAAW,EAA5B;EACA,MAAM;IAAEa,IAAF;IAAQC,SAAR;IAAmBC;EAAnB,IAAiCd,WAAW,CAACE,cAAD,CAAlD;EACA,MAAM,CAACa,IAAD,IAASV,IAAI,CAACW,OAAL,EAAf;EACA,MAAMC,MAAM,GAAGd,SAAS,EAAxB;;EACA,MAAMe,QAAQ,GAAIC,WAAD,IAAiB;IAChC;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAEA,MAAMC,EAAE,GAAGC,OAAO,CAACC,GAAnB;IACAX,QAAQ,CAACV,IAAI,CAACsB,MAAL,CAAYb,MAAZ,EAAoBU,EAApB,EAAwBD,WAAxB,CAAD,CAAR;EACD,CAlBD;;EAmBAtB,SAAS,CAAC,MAAM;IACdc,QAAQ,CAACV,IAAI,CAACW,IAAL,CAAU,UAAV,EAAsBK,MAAtB,aAAsBA,MAAtB,uBAAsBA,MAAM,CAAEG,EAA9B,CAAD,CAAR;IACAI,OAAO,CAACC,GAAR,CAAYb,IAAZ;;IACA,IAAGA,IAAH,EAAS;MACPG,IAAI,CAACW,cAAL,CAAoBd,IAApB;IACD;;IACDY,OAAO,CAACC,GAAR,CAAYV,IAAZ;EACD,CAPQ,EAON,CAACH,IAAD,CAPM,CAAT;EAQA,MAAMe,mBAAmB,GAAGC,WAAW,CAAC,MAAM;IAC5CjB,QAAQ,CAACV,IAAI,CAACW,IAAL,CAAU,UAAV,EAAsBK,MAAtB,aAAsBA,MAAtB,uBAAsBA,MAAM,CAAEG,EAA9B,CAAD,CAAR;EACD,CAFsC,EAEpC,EAFoC,CAAvC;EAIAvB,SAAS,CAAC,MAAM;IACd,IAAIiB,SAAJ,EAAe;MACbC,IAAI,CAACc,WAAL,GADa,CAEb;MACA;IACD;EACF,CANQ,EAMN,CAACf,SAAD,CANM,CAAT;EASA,oBACE;IAAA,uBACE,QAAC,OAAD;MAAS,SAAS,EAAED,SAApB;MAAA,uBACE,QAAC,IAAD;QAAM,IAAI,EAAEE,IAAZ;QAAkB,MAAM,EAAC,UAAzB;QAAoC,QAAQ,EAAEG,QAA9C;QAAyD,QAAQ,EAAEY,cAAnE;QAAA,WACGrB,YADH,eAEE,QAAC,IAAD,CAAM,IAAN;UAAA,uBACE,QAAC,MAAD;YAAQ,IAAI,EAAC,SAAb;YAAuB,QAAQ,EAAC,QAAhC;YAAA;UAAA;YAAA;YAAA;YAAA;UAAA;QADF;UAAA;UAAA;UAAA;QAAA,QAFF;MAAA;QAAA;QAAA;QAAA;MAAA;IADF;MAAA;MAAA;MAAA;IAAA;EADF;IAAA;IAAA;IAAA;EAAA,QADF;AAcD;;GA5DuBF,U;UAELR,W,EACsBC,W,EACxBK,IAAI,CAACW,O,EACLb,S;;;KALOI,U"},"metadata":{},"sourceType":"module"}