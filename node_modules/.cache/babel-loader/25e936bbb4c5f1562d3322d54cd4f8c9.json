{"ast":null,"code":"var _jsxFileName = \"D:\\\\mock-reactjs\\\\frontend-new\\\\src\\\\modules\\\\CustomCrudModule\\\\DataTable.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useCallback, useEffect, useState, useRef } from \"react\";\nimport { Dropdown, Button, PageHeader, Table, Input } from \"antd\";\nimport { EllipsisOutlined } from \"@ant-design/icons\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { crud } from \"@/redux/crud/actions\";\nimport \"@/redux/crud/selectors\";\nimport uniqueId from \"@/utils/uinqueId\";\nimport inverseColor from \"@/utils/inverseColor\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function DataTable(_ref) {\n  _s();\n\n  let {\n    config,\n    DropDownRowMenu,\n    AddNewItem\n  } = _ref;\n  const inputColorRef = useRef(null);\n  const [selectedRowKeys, setSelectedRowKeys] = useState([]);\n  const [tableItemsList, setTableItemsList] = useState([]);\n  const [coloredRow, setColoredRow] = useState({});\n\n  const openColorBox = () => {\n    inputColorRef.current.click();\n  };\n\n  const handelColorChange = e => {\n    const tmpObj = {};\n    const tmpColoredRows = selectedRowKeys.map(x => {\n      tmpObj[x] = e.target.value;\n    });\n    setColoredRow({ ...coloredRow,\n      ...tmpObj\n    });\n    setSelectedRowKeys([]);\n  };\n\n  function MakeNewColor() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: \"relative\",\n        display: \"inline-block\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        onClick: openColorBox,\n        children: \"Make new Color\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"color\",\n        ref: inputColorRef,\n        onChange: handelColorChange,\n        style: {\n          opacity: 0,\n          position: \"absolute\",\n          left: 0,\n          top: \"10px\",\n          width: \"100%\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this);\n  }\n\n  let {\n    entity,\n    dataTableColumns,\n    dataTableTitle\n  } = config;\n  const newDataTableColumns = dataTableColumns.map(obj => ({ ...obj,\n    render: (text, row) => {\n      return {\n        props: {\n          style: {\n            background: coloredRow[row._id] ? coloredRow[row._id] : \"\",\n            color: coloredRow[row._id] ? inverseColor(coloredRow[row._id]) : \"\"\n          }\n        },\n        children: text\n      };\n    }\n  }));\n  dataTableColumns = [...newDataTableColumns, {\n    title: \"\",\n    render: row => {\n      return {\n        props: {\n          style: {\n            background: coloredRow[row._id] ? coloredRow[row._id] : \"\",\n            color: coloredRow[row._id] ? inverseColor(coloredRow[row._id]) : \"\"\n          }\n        },\n        children: /*#__PURE__*/_jsxDEV(Dropdown, {\n          overlay: DropDownRowMenu({\n            row\n          }),\n          trigger: [\"click\"],\n          children: /*#__PURE__*/_jsxDEV(EllipsisOutlined, {\n            style: {\n              cursor: \"pointer\",\n              fontSize: \"24px\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 13\n        }, this)\n      };\n    }\n  }];\n  const {\n    result: listResult,\n    isLoading: listIsLoading\n  } = useSelector(selectListItems);\n  const {\n    pagination,\n    items\n  } = listResult;\n  const dispatch = useDispatch();\n  const handelDataTableLoad = useCallback(pagination => {\n    dispatch(crud.list(entity, pagination.current));\n  }, []);\n  useEffect(() => {\n    dispatch(crud.list(entity));\n  }, []);\n  useEffect(() => {\n    const listIds = items.map(x => x._id);\n    setTableItemsList(listIds);\n  }, [items]);\n  const [firstRow, setFirstRow] = useState();\n  const [onSelect, setSelect] = useState(false);\n\n  const onClickRow = (record, rowIndex) => {\n    return {\n      onClick: () => {// const exist = selectedRowKeys.includes(record._id);\n        // if (exist) {\n        //   let filtered = selectedRowKeys.filter(function (value) {\n        //     return value != record._id;\n        //   });\n        //   setSelectedRowKeys(filtered);\n        // } else {\n        //   setSelectedRowKeys([...selectedRowKeys, record._id]);\n        // }\n      },\n      onMouseDown: () => {\n        setFirstRow(rowIndex);\n        setSelectedRowKeys([record._id]);\n        setSelect(true);\n      },\n      onMouseEnter: () => {\n        if (onSelect) {\n          const selectedRange = tableItemsList.slice(firstRow, rowIndex + 1);\n          setSelectedRowKeys(selectedRange);\n        }\n      },\n      onMouseUp: () => {\n        setSelect(false);\n      }\n    };\n  };\n\n  const handelColorRow = (checked, record, index, originNode) => {\n    return {\n      props: {\n        style: {\n          background: coloredRow[record._id] ? coloredRow[record._id] : \"\"\n        }\n      } // children: originNode,\n\n    };\n  };\n\n  const onSelectChange = (selectedKeys, selectedRows) => {\n    setSelectedRowKeys(selectedKeys);\n    console.log(\"selectedRowKeys changed: \", selectedRowKeys);\n  };\n\n  const rowSelection = {\n    selectedRowKeys,\n    onChange: onSelectChange,\n    hideSelectAll: true,\n    columnWidth: 0,\n    renderCell: handelColorRow,\n    selectedRowKeys: selectedRowKeys\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(PageHeader, {\n      onBack: () => window.history.back(),\n      title: dataTableTitle,\n      ghost: false,\n      extra: [/*#__PURE__*/_jsxDEV(MakeNewColor, {\n        config: config\n      }, `${uniqueId()}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: handelDataTableLoad,\n        children: \"Refresh\"\n      }, `${uniqueId()}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(AddNewItem, {\n        config: config\n      }, `${uniqueId()}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 11\n      }, this)],\n      style: {\n        padding: \"20px 0px\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Table, {\n      columns: dataTableColumns,\n      rowKey: item => item._id,\n      rowSelection: rowSelection,\n      onRow: onClickRow,\n      ellipsis: true // rowClassName={setRowClassName}\n      ,\n      size: \"small\",\n      dataSource: items,\n      pagination: pagination,\n      loading: listIsLoading,\n      onChange: handelDataTableLoad\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(DataTable, \"eC1O8xxrrInc8HjtwZ/d+usRKKE=\", false, function () {\n  return [useSelector, useDispatch];\n});\n\n_c = DataTable;\n\nvar _c;\n\n$RefreshReg$(_c, \"DataTable\");","map":{"version":3,"names":["React","useCallback","useEffect","useState","useRef","Dropdown","Button","PageHeader","Table","Input","EllipsisOutlined","useSelector","useDispatch","crud","uniqueId","inverseColor","DataTable","config","DropDownRowMenu","AddNewItem","inputColorRef","selectedRowKeys","setSelectedRowKeys","tableItemsList","setTableItemsList","coloredRow","setColoredRow","openColorBox","current","click","handelColorChange","e","tmpObj","tmpColoredRows","map","x","target","value","MakeNewColor","position","display","opacity","left","top","width","entity","dataTableColumns","dataTableTitle","newDataTableColumns","obj","render","text","row","props","style","background","_id","color","children","title","cursor","fontSize","result","listResult","isLoading","listIsLoading","selectListItems","pagination","items","dispatch","handelDataTableLoad","list","listIds","firstRow","setFirstRow","onSelect","setSelect","onClickRow","record","rowIndex","onClick","onMouseDown","onMouseEnter","selectedRange","slice","onMouseUp","handelColorRow","checked","index","originNode","onSelectChange","selectedKeys","selectedRows","console","log","rowSelection","onChange","hideSelectAll","columnWidth","renderCell","window","history","back","padding","item"],"sources":["D:/mock-reactjs/frontend-new/src/modules/CustomCrudModule/DataTable.jsx"],"sourcesContent":["import React, { useCallback, useEffect, useState, useRef } from \"react\";\r\nimport { Dropdown, Button, PageHeader, Table, Input } from \"antd\";\r\n\r\nimport { EllipsisOutlined } from \"@ant-design/icons\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { crud } from \"@/redux/crud/actions\";\r\nimport { \r\n  \r\n\r\n  \r\n } from \"@/redux/crud/selectors\";\r\n\r\nimport uniqueId from \"@/utils/uinqueId\";\r\nimport inverseColor from \"@/utils/inverseColor\";\r\n\r\nexport default function DataTable({ config, DropDownRowMenu, AddNewItem }) {\r\n  const inputColorRef = useRef(null);\r\n  const [selectedRowKeys, setSelectedRowKeys] = useState([]);\r\n  const [tableItemsList, setTableItemsList] = useState([]);\r\n  const [coloredRow, setColoredRow] = useState({});\r\n\r\n  const openColorBox = () => {\r\n    inputColorRef.current.click();\r\n  };\r\n  const handelColorChange = (e) => {\r\n    const tmpObj = {};\r\n    const tmpColoredRows = selectedRowKeys.map((x) => {\r\n      tmpObj[x] = e.target.value;\r\n    });\r\n\r\n    setColoredRow({ ...coloredRow, ...tmpObj });\r\n    setSelectedRowKeys([]);\r\n  };\r\n  function MakeNewColor() {\r\n    return (\r\n      <div style={{ position: \"relative\", display: \"inline-block\" }}>\r\n        <Button onClick={openColorBox}>Make new Color</Button>\r\n        <input\r\n          type=\"color\"\r\n          ref={inputColorRef}\r\n          onChange={handelColorChange}\r\n          style={{\r\n            opacity: 0,\r\n            position: \"absolute\",\r\n            left: 0,\r\n            top: \"10px\",\r\n            width: \"100%\",\r\n          }}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n  let { entity, dataTableColumns, dataTableTitle } = config;\r\n  const newDataTableColumns = dataTableColumns.map((obj) => ({\r\n    ...obj,\r\n    render: (text, row) => {\r\n      return {\r\n        props: {\r\n          style: {\r\n            background: coloredRow[row._id] ? coloredRow[row._id] : \"\",\r\n            color: coloredRow[row._id] ? inverseColor(coloredRow[row._id]) : \"\",\r\n          },\r\n        },\r\n        children: text,\r\n      };\r\n    },\r\n  }));\r\n  dataTableColumns = [\r\n    ...newDataTableColumns,\r\n    {\r\n      title: \"\",\r\n      render: (row) => {\r\n        return {\r\n          props: {\r\n            style: {\r\n              background: coloredRow[row._id] ? coloredRow[row._id] : \"\",\r\n              color: coloredRow[row._id]\r\n                ? inverseColor(coloredRow[row._id])\r\n                : \"\",\r\n            },\r\n          },\r\n          children: (\r\n            <Dropdown overlay={DropDownRowMenu({ row })} trigger={[\"click\"]}>\r\n              <EllipsisOutlined\r\n                style={{ cursor: \"pointer\", fontSize: \"24px\" }}\r\n              />\r\n            </Dropdown>\r\n          ),\r\n        };\r\n      },\r\n    },\r\n  ];\r\n\r\n  const { result: listResult, isLoading: listIsLoading } =\r\n    useSelector(selectListItems);\r\n\r\n  const { pagination, items } = listResult;\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const handelDataTableLoad = useCallback((pagination) => {\r\n    dispatch(crud.list(entity, pagination.current));\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    dispatch(crud.list(entity));\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const listIds = items.map((x) => x._id);\r\n    setTableItemsList(listIds);\r\n  }, [items]);\r\n\r\n  const [firstRow, setFirstRow] = useState();\r\n\r\n  const [onSelect, setSelect] = useState(false);\r\n  const onClickRow = (record, rowIndex) => {\r\n    return {\r\n      onClick: () => {\r\n        // const exist = selectedRowKeys.includes(record._id);\r\n        // if (exist) {\r\n        //   let filtered = selectedRowKeys.filter(function (value) {\r\n        //     return value != record._id;\r\n        //   });\r\n        //   setSelectedRowKeys(filtered);\r\n        // } else {\r\n        //   setSelectedRowKeys([...selectedRowKeys, record._id]);\r\n        // }\r\n      },\r\n      onMouseDown: () => {\r\n        setFirstRow(rowIndex);\r\n        setSelectedRowKeys([record._id]);\r\n        setSelect(true);\r\n      },\r\n      onMouseEnter: () => {\r\n        if (onSelect) {\r\n          const selectedRange = tableItemsList.slice(firstRow, rowIndex + 1);\r\n          setSelectedRowKeys(selectedRange);\r\n        }\r\n      },\r\n      onMouseUp: () => {\r\n        setSelect(false);\r\n      },\r\n    };\r\n  };\r\n\r\n  const handelColorRow = (checked, record, index, originNode) => {\r\n    return {\r\n      props: {\r\n        style: {\r\n          background: coloredRow[record._id] ? coloredRow[record._id] : \"\",\r\n        },\r\n      },\r\n      // children: originNode,\r\n    };\r\n  };\r\n\r\n  const onSelectChange = (selectedKeys, selectedRows) => {\r\n    setSelectedRowKeys(selectedKeys);\r\n    console.log(\"selectedRowKeys changed: \", selectedRowKeys);\r\n  };\r\n\r\n  const rowSelection = {\r\n    selectedRowKeys,\r\n    onChange: onSelectChange,\r\n    hideSelectAll: true,\r\n    columnWidth: 0,\r\n\r\n    renderCell: handelColorRow,\r\n    selectedRowKeys: selectedRowKeys,\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <PageHeader\r\n        onBack={() => window.history.back()}\r\n        title={dataTableTitle}\r\n        ghost={false}\r\n        extra={[\r\n          <MakeNewColor key={`${uniqueId()}`} config={config} />,\r\n          <Button onClick={handelDataTableLoad} key={`${uniqueId()}`}>\r\n            Refresh\r\n          </Button>,\r\n          <AddNewItem key={`${uniqueId()}`} config={config} />,\r\n        ]}\r\n        style={{\r\n          padding: \"20px 0px\",\r\n        }}\r\n      ></PageHeader>\r\n      <Table\r\n        columns={dataTableColumns}\r\n        rowKey={(item) => item._id}\r\n        rowSelection={rowSelection}\r\n        onRow={onClickRow}\r\n        ellipsis={true}\r\n        // rowClassName={setRowClassName}\r\n        size={\"small\"}\r\n        dataSource={items}\r\n        pagination={pagination}\r\n        loading={listIsLoading}\r\n        onChange={handelDataTableLoad}\r\n      />\r\n    </>\r\n  );\r\n}\r\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,WAAhB,EAA6BC,SAA7B,EAAwCC,QAAxC,EAAkDC,MAAlD,QAAgE,OAAhE;AACA,SAASC,QAAT,EAAmBC,MAAnB,EAA2BC,UAA3B,EAAuCC,KAAvC,EAA8CC,KAA9C,QAA2D,MAA3D;AAEA,SAASC,gBAAT,QAAiC,mBAAjC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,IAAT,QAAqB,sBAArB;AACA,OAIQ,wBAJR;AAMA,OAAOC,QAAP,MAAqB,kBAArB;AACA,OAAOC,YAAP,MAAyB,sBAAzB;;;AAEA,eAAe,SAASC,SAAT,OAA4D;EAAA;;EAAA,IAAzC;IAAEC,MAAF;IAAUC,eAAV;IAA2BC;EAA3B,CAAyC;EACzE,MAAMC,aAAa,GAAGhB,MAAM,CAAC,IAAD,CAA5B;EACA,MAAM,CAACiB,eAAD,EAAkBC,kBAAlB,IAAwCnB,QAAQ,CAAC,EAAD,CAAtD;EACA,MAAM,CAACoB,cAAD,EAAiBC,iBAAjB,IAAsCrB,QAAQ,CAAC,EAAD,CAApD;EACA,MAAM,CAACsB,UAAD,EAAaC,aAAb,IAA8BvB,QAAQ,CAAC,EAAD,CAA5C;;EAEA,MAAMwB,YAAY,GAAG,MAAM;IACzBP,aAAa,CAACQ,OAAd,CAAsBC,KAAtB;EACD,CAFD;;EAGA,MAAMC,iBAAiB,GAAIC,CAAD,IAAO;IAC/B,MAAMC,MAAM,GAAG,EAAf;IACA,MAAMC,cAAc,GAAGZ,eAAe,CAACa,GAAhB,CAAqBC,CAAD,IAAO;MAChDH,MAAM,CAACG,CAAD,CAAN,GAAYJ,CAAC,CAACK,MAAF,CAASC,KAArB;IACD,CAFsB,CAAvB;IAIAX,aAAa,CAAC,EAAE,GAAGD,UAAL;MAAiB,GAAGO;IAApB,CAAD,CAAb;IACAV,kBAAkB,CAAC,EAAD,CAAlB;EACD,CARD;;EASA,SAASgB,YAAT,GAAwB;IACtB,oBACE;MAAK,KAAK,EAAE;QAAEC,QAAQ,EAAE,UAAZ;QAAwBC,OAAO,EAAE;MAAjC,CAAZ;MAAA,wBACE,QAAC,MAAD;QAAQ,OAAO,EAAEb,YAAjB;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QADF,eAEE;QACE,IAAI,EAAC,OADP;QAEE,GAAG,EAAEP,aAFP;QAGE,QAAQ,EAAEU,iBAHZ;QAIE,KAAK,EAAE;UACLW,OAAO,EAAE,CADJ;UAELF,QAAQ,EAAE,UAFL;UAGLG,IAAI,EAAE,CAHD;UAILC,GAAG,EAAE,MAJA;UAKLC,KAAK,EAAE;QALF;MAJT;QAAA;QAAA;QAAA;MAAA,QAFF;IAAA;MAAA;MAAA;MAAA;IAAA,QADF;EAiBD;;EACD,IAAI;IAAEC,MAAF;IAAUC,gBAAV;IAA4BC;EAA5B,IAA+C9B,MAAnD;EACA,MAAM+B,mBAAmB,GAAGF,gBAAgB,CAACZ,GAAjB,CAAsBe,GAAD,KAAU,EACzD,GAAGA,GADsD;IAEzDC,MAAM,EAAE,CAACC,IAAD,EAAOC,GAAP,KAAe;MACrB,OAAO;QACLC,KAAK,EAAE;UACLC,KAAK,EAAE;YACLC,UAAU,EAAE9B,UAAU,CAAC2B,GAAG,CAACI,GAAL,CAAV,GAAsB/B,UAAU,CAAC2B,GAAG,CAACI,GAAL,CAAhC,GAA4C,EADnD;YAELC,KAAK,EAAEhC,UAAU,CAAC2B,GAAG,CAACI,GAAL,CAAV,GAAsBzC,YAAY,CAACU,UAAU,CAAC2B,GAAG,CAACI,GAAL,CAAX,CAAlC,GAA0D;UAF5D;QADF,CADF;QAOLE,QAAQ,EAAEP;MAPL,CAAP;IASD;EAZwD,CAAV,CAArB,CAA5B;EAcAL,gBAAgB,GAAG,CACjB,GAAGE,mBADc,EAEjB;IACEW,KAAK,EAAE,EADT;IAEET,MAAM,EAAGE,GAAD,IAAS;MACf,OAAO;QACLC,KAAK,EAAE;UACLC,KAAK,EAAE;YACLC,UAAU,EAAE9B,UAAU,CAAC2B,GAAG,CAACI,GAAL,CAAV,GAAsB/B,UAAU,CAAC2B,GAAG,CAACI,GAAL,CAAhC,GAA4C,EADnD;YAELC,KAAK,EAAEhC,UAAU,CAAC2B,GAAG,CAACI,GAAL,CAAV,GACHzC,YAAY,CAACU,UAAU,CAAC2B,GAAG,CAACI,GAAL,CAAX,CADT,GAEH;UAJC;QADF,CADF;QASLE,QAAQ,eACN,QAAC,QAAD;UAAU,OAAO,EAAExC,eAAe,CAAC;YAAEkC;UAAF,CAAD,CAAlC;UAA6C,OAAO,EAAE,CAAC,OAAD,CAAtD;UAAA,uBACE,QAAC,gBAAD;YACE,KAAK,EAAE;cAAEQ,MAAM,EAAE,SAAV;cAAqBC,QAAQ,EAAE;YAA/B;UADT;YAAA;YAAA;YAAA;UAAA;QADF;UAAA;UAAA;UAAA;QAAA;MAVG,CAAP;IAiBD;EApBH,CAFiB,CAAnB;EA0BA,MAAM;IAAEC,MAAM,EAAEC,UAAV;IAAsBC,SAAS,EAAEC;EAAjC,IACJtD,WAAW,CAACuD,eAAD,CADb;EAGA,MAAM;IAAEC,UAAF;IAAcC;EAAd,IAAwBL,UAA9B;EAEA,MAAMM,QAAQ,GAAGzD,WAAW,EAA5B;EAEA,MAAM0D,mBAAmB,GAAGrE,WAAW,CAAEkE,UAAD,IAAgB;IACtDE,QAAQ,CAACxD,IAAI,CAAC0D,IAAL,CAAU1B,MAAV,EAAkBsB,UAAU,CAACvC,OAA7B,CAAD,CAAR;EACD,CAFsC,EAEpC,EAFoC,CAAvC;EAIA1B,SAAS,CAAC,MAAM;IACdmE,QAAQ,CAACxD,IAAI,CAAC0D,IAAL,CAAU1B,MAAV,CAAD,CAAR;EACD,CAFQ,EAEN,EAFM,CAAT;EAIA3C,SAAS,CAAC,MAAM;IACd,MAAMsE,OAAO,GAAGJ,KAAK,CAAClC,GAAN,CAAWC,CAAD,IAAOA,CAAC,CAACqB,GAAnB,CAAhB;IACAhC,iBAAiB,CAACgD,OAAD,CAAjB;EACD,CAHQ,EAGN,CAACJ,KAAD,CAHM,CAAT;EAKA,MAAM,CAACK,QAAD,EAAWC,WAAX,IAA0BvE,QAAQ,EAAxC;EAEA,MAAM,CAACwE,QAAD,EAAWC,SAAX,IAAwBzE,QAAQ,CAAC,KAAD,CAAtC;;EACA,MAAM0E,UAAU,GAAG,CAACC,MAAD,EAASC,QAAT,KAAsB;IACvC,OAAO;MACLC,OAAO,EAAE,MAAM,CACb;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;MACD,CAXI;MAYLC,WAAW,EAAE,MAAM;QACjBP,WAAW,CAACK,QAAD,CAAX;QACAzD,kBAAkB,CAAC,CAACwD,MAAM,CAACtB,GAAR,CAAD,CAAlB;QACAoB,SAAS,CAAC,IAAD,CAAT;MACD,CAhBI;MAiBLM,YAAY,EAAE,MAAM;QAClB,IAAIP,QAAJ,EAAc;UACZ,MAAMQ,aAAa,GAAG5D,cAAc,CAAC6D,KAAf,CAAqBX,QAArB,EAA+BM,QAAQ,GAAG,CAA1C,CAAtB;UACAzD,kBAAkB,CAAC6D,aAAD,CAAlB;QACD;MACF,CAtBI;MAuBLE,SAAS,EAAE,MAAM;QACfT,SAAS,CAAC,KAAD,CAAT;MACD;IAzBI,CAAP;EA2BD,CA5BD;;EA8BA,MAAMU,cAAc,GAAG,CAACC,OAAD,EAAUT,MAAV,EAAkBU,KAAlB,EAAyBC,UAAzB,KAAwC;IAC7D,OAAO;MACLpC,KAAK,EAAE;QACLC,KAAK,EAAE;UACLC,UAAU,EAAE9B,UAAU,CAACqD,MAAM,CAACtB,GAAR,CAAV,GAAyB/B,UAAU,CAACqD,MAAM,CAACtB,GAAR,CAAnC,GAAkD;QADzD;MADF,CADF,CAML;;IANK,CAAP;EAQD,CATD;;EAWA,MAAMkC,cAAc,GAAG,CAACC,YAAD,EAAeC,YAAf,KAAgC;IACrDtE,kBAAkB,CAACqE,YAAD,CAAlB;IACAE,OAAO,CAACC,GAAR,CAAY,2BAAZ,EAAyCzE,eAAzC;EACD,CAHD;;EAKA,MAAM0E,YAAY,GAAG;IACnB1E,eADmB;IAEnB2E,QAAQ,EAAEN,cAFS;IAGnBO,aAAa,EAAE,IAHI;IAInBC,WAAW,EAAE,CAJM;IAMnBC,UAAU,EAAEb,cANO;IAOnBjE,eAAe,EAAEA;EAPE,CAArB;EAUA,oBACE;IAAA,wBACE,QAAC,UAAD;MACE,MAAM,EAAE,MAAM+E,MAAM,CAACC,OAAP,CAAeC,IAAf,EADhB;MAEE,KAAK,EAAEvD,cAFT;MAGE,KAAK,EAAE,KAHT;MAIE,KAAK,EAAE,cACL,QAAC,YAAD;QAAoC,MAAM,EAAE9B;MAA5C,GAAoB,GAAEH,QAAQ,EAAG,EAAjC;QAAA;QAAA;QAAA;MAAA,QADK,eAEL,QAAC,MAAD;QAAQ,OAAO,EAAEwD,mBAAjB;QAAA;MAAA,GAA4C,GAAExD,QAAQ,EAAG,EAAzD;QAAA;QAAA;QAAA;MAAA,QAFK,eAKL,QAAC,UAAD;QAAkC,MAAM,EAAEG;MAA1C,GAAkB,GAAEH,QAAQ,EAAG,EAA/B;QAAA;QAAA;QAAA;MAAA,QALK,CAJT;MAWE,KAAK,EAAE;QACLyF,OAAO,EAAE;MADJ;IAXT;MAAA;MAAA;MAAA;IAAA,QADF,eAgBE,QAAC,KAAD;MACE,OAAO,EAAEzD,gBADX;MAEE,MAAM,EAAG0D,IAAD,IAAUA,IAAI,CAAChD,GAFzB;MAGE,YAAY,EAAEuC,YAHhB;MAIE,KAAK,EAAElB,UAJT;MAKE,QAAQ,EAAE,IALZ,CAME;MANF;MAOE,IAAI,EAAE,OAPR;MAQE,UAAU,EAAET,KARd;MASE,UAAU,EAAED,UATd;MAUE,OAAO,EAAEF,aAVX;MAWE,QAAQ,EAAEK;IAXZ;MAAA;MAAA;MAAA;IAAA,QAhBF;EAAA,gBADF;AAgCD;;GA7LuBtD,S;UA+EpBL,W,EAIeC,W;;;KAnFKI,S"},"metadata":{},"sourceType":"module"}