{"ast":null,"code":"import * as actionTypes from \"./types\";\nimport { request } from \"@/request\";\nexport const crud = {\n  resetState: () => async dispatch => {\n    dispatch({\n      type: actionTypes.RESET_STATE\n    });\n  },\n  resetAction: actionType => async dispatch => {\n    dispatch({\n      type: actionTypes.RESET_ACTION,\n      keyState: actionType,\n      payload: null\n    });\n  },\n  currentItem: data => async dispatch => {\n    dispatch({\n      type: actionTypes.CURRENT_ITEM,\n      payload: { ...data\n      }\n    });\n  },\n  currentAction: (actionType, data) => async dispatch => {\n    dispatch({\n      type: actionTypes.CURRENT_ACTION,\n      keyState: actionType,\n      payload: { ...data\n      }\n    });\n  },\n  list: function (entity) {\n    let currentPage = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    let option = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    return async dispatch => {\n      dispatch({\n        type: actionTypes.REQUEST_LOADING,\n        keyState: \"list\",\n        payload: null\n      });\n      let data = await request.list(entity, option);\n\n      if (data.success === true) {\n        const result = {\n          items: data.data,\n          pagination: {// current: parseInt(1, 10),\n            // pageSize: 10,\n            // total: parseInt(9, 10),\n          }\n        };\n        dispatch({\n          type: actionTypes.REQUEST_SUCCESS,\n          keyState: \"list\",\n          payload: result\n        });\n      } else {\n        dispatch({\n          type: actionTypes.REQUEST_FAILED,\n          keyState: \"list\",\n          payload: null\n        });\n      }\n    };\n  },\n  create: (entity, jsonData) => async dispatch => {\n    dispatch({\n      type: actionTypes.REQUEST_LOADING,\n      keyState: \"create\",\n      payload: null\n    });\n    console.log(\"jsonData action redux\", jsonData);\n    let data = await request.create(entity, jsonData);\n\n    if (data.success === true) {\n      dispatch({\n        type: actionTypes.REQUEST_SUCCESS,\n        keyState: \"create\",\n        payload: data.data\n      });\n      dispatch({\n        type: actionTypes.CURRENT_ITEM,\n        payload: data.data\n      });\n    } else {\n      dispatch({\n        type: actionTypes.REQUEST_FAILED,\n        keyState: \"create\",\n        payload: null\n      });\n    }\n  },\n  read: (entity, itemId) => async dispatch => {\n    dispatch({\n      type: actionTypes.REQUEST_LOADING,\n      keyState: \"read\",\n      payload: null\n    });\n    let data = await request.read(entity, itemId);\n\n    if (data.success === true) {\n      dispatch({\n        type: actionTypes.CURRENT_ITEM,\n        payload: data.data\n      });\n      dispatch({\n        type: actionTypes.REQUEST_SUCCESS,\n        keyState: \"read\",\n        payload: data.data\n      });\n    } else {\n      dispatch({\n        type: actionTypes.REQUEST_FAILED,\n        keyState: \"read\",\n        payload: null\n      });\n    }\n  },\n  update: (entity, itemId, jsonData) => async dispatch => {\n    dispatch({\n      type: actionTypes.REQUEST_LOADING,\n      keyState: \"update\",\n      payload: null\n    });\n    let data = await request.update(entity, itemId, jsonData);\n\n    if (data.success === true) {\n      dispatch({\n        type: actionTypes.REQUEST_SUCCESS,\n        keyState: \"update\",\n        payload: data.data\n      });\n      dispatch({\n        type: actionTypes.CURRENT_ITEM,\n        payload: data.data\n      });\n    } else {\n      dispatch({\n        type: actionTypes.REQUEST_FAILED,\n        keyState: \"update\",\n        payload: null\n      });\n    }\n  },\n  delete: (entity, itemId) => async dispatch => {\n    dispatch({\n      type: actionTypes.REQUEST_LOADING,\n      keyState: \"delete\",\n      payload: null\n    });\n    let data = await request.delete(entity, itemId);\n\n    if (data.success === true) {\n      dispatch({\n        type: actionTypes.REQUEST_SUCCESS,\n        keyState: \"delete\",\n        payload: data.result\n      });\n    } else {\n      dispatch({\n        type: actionTypes.REQUEST_FAILED,\n        keyState: \"delete\",\n        payload: null\n      });\n    }\n  },\n  search: (entity, source, option) => async dispatch => {\n    dispatch({\n      type: actionTypes.REQUEST_LOADING,\n      keyState: \"search\",\n      payload: null\n    });\n    source.cancel();\n    source = request.source();\n    let data = await request.search(entity, source, option);\n\n    if (data.success === true) {\n      dispatch({\n        type: actionTypes.REQUEST_SUCCESS,\n        keyState: \"search\",\n        payload: data.result\n      });\n    } else {\n      dispatch({\n        type: actionTypes.REQUEST_FAILED,\n        keyState: \"search\",\n        payload: null\n      });\n    }\n  }\n};","map":{"version":3,"names":["actionTypes","request","crud","resetState","dispatch","type","RESET_STATE","resetAction","actionType","RESET_ACTION","keyState","payload","currentItem","data","CURRENT_ITEM","currentAction","CURRENT_ACTION","list","entity","currentPage","option","REQUEST_LOADING","success","result","items","pagination","REQUEST_SUCCESS","REQUEST_FAILED","create","jsonData","console","log","read","itemId","update","delete","search","source","cancel"],"sources":["D:/mock-reactjs/frontend-new/src/redux/crud/actions.js"],"sourcesContent":["import * as actionTypes from \"./types\";\r\nimport { request } from \"@/request\";\r\n\r\nexport const crud = {\r\n  resetState: () => async (dispatch) => {\r\n    dispatch({\r\n      type: actionTypes.RESET_STATE,\r\n    });\r\n  },\r\n  resetAction: (actionType) => async (dispatch) => {\r\n    dispatch({\r\n      type: actionTypes.RESET_ACTION,\r\n      keyState: actionType,\r\n      payload: null,\r\n    });\r\n  },\r\n  currentItem: (data) => async (dispatch) => {\r\n    dispatch({\r\n      type: actionTypes.CURRENT_ITEM,\r\n      payload: { ...data },\r\n    });\r\n  },\r\n  currentAction: (actionType, data) => async (dispatch) => {\r\n    dispatch({\r\n      type: actionTypes.CURRENT_ACTION,\r\n      keyState: actionType,\r\n      payload: { ...data },\r\n    });\r\n  },\r\n  list: (entity, currentPage = 1, option = {}) => async (dispatch) => {\r\n    dispatch({\r\n      type: actionTypes.REQUEST_LOADING,\r\n      keyState: \"list\",\r\n      payload: null,\r\n    });\r\n\r\n    let data = await request.list(entity, option);\r\n\r\n    if (data.success === true) {\r\n      const result = {\r\n        items: data.data,\r\n          pagination: {\r\n            // current: parseInt(1, 10),\r\n            // pageSize: 10,\r\n            // total: parseInt(9, 10),\r\n          },\r\n      };\r\n      dispatch({\r\n        type: actionTypes.REQUEST_SUCCESS,\r\n        keyState: \"list\",\r\n        payload: result,\r\n      });\r\n    } else {\r\n      dispatch({\r\n        type: actionTypes.REQUEST_FAILED,\r\n        keyState: \"list\",\r\n        payload: null,\r\n      });\r\n    }\r\n  },\r\n  create: (entity, jsonData) => async (dispatch) => {\r\n    dispatch({\r\n      type: actionTypes.REQUEST_LOADING,\r\n      keyState: \"create\",\r\n      payload: null,\r\n    });\r\n    console.log(\"jsonData action redux\", jsonData);\r\n    let data = await request.create(entity, jsonData);\r\n    if (data.success === true) {\r\n      dispatch({\r\n        type: actionTypes.REQUEST_SUCCESS,\r\n        keyState: \"create\",\r\n        payload: data.data,\r\n      });\r\n\r\n      dispatch({\r\n        type: actionTypes.CURRENT_ITEM,\r\n        payload: data.data,\r\n      });\r\n    } else {\r\n      dispatch({\r\n        type: actionTypes.REQUEST_FAILED,\r\n        keyState: \"create\",\r\n        payload: null,\r\n      });\r\n    }\r\n  },\r\n  read: (entity, itemId) => async (dispatch) => {\r\n    dispatch({\r\n      type: actionTypes.REQUEST_LOADING,\r\n      keyState: \"read\",\r\n      payload: null,\r\n    });\r\n\r\n    let data = await request.read(entity, itemId);\r\n    if (data.success === true) {\r\n      dispatch({\r\n        type: actionTypes.CURRENT_ITEM,\r\n        payload: data.data,\r\n      });\r\n      dispatch({\r\n        type: actionTypes.REQUEST_SUCCESS,\r\n        keyState: \"read\",\r\n        payload: data.data,\r\n      });\r\n    } else {\r\n      dispatch({\r\n        type: actionTypes.REQUEST_FAILED,\r\n        keyState: \"read\",\r\n        payload: null,\r\n      });\r\n    }\r\n  },\r\n  update: (entity, itemId, jsonData) => async (dispatch) => {\r\n    dispatch({\r\n      type: actionTypes.REQUEST_LOADING,\r\n      keyState: \"update\",\r\n      payload: null,\r\n    });\r\n\r\n    let data = await request.update(entity, itemId, jsonData);\r\n\r\n    if (data.success === true) {\r\n      dispatch({\r\n        type: actionTypes.REQUEST_SUCCESS,\r\n        keyState: \"update\",\r\n        payload: data.data,\r\n      });\r\n      dispatch({\r\n        type: actionTypes.CURRENT_ITEM,\r\n        payload: data.data,\r\n      });\r\n    } else {\r\n      dispatch({\r\n        type: actionTypes.REQUEST_FAILED,\r\n        keyState: \"update\",\r\n        payload: null,\r\n      });\r\n    }\r\n  },\r\n\r\n  delete: (entity, itemId) => async (dispatch) => {\r\n    dispatch({\r\n      type: actionTypes.REQUEST_LOADING,\r\n      keyState: \"delete\",\r\n      payload: null,\r\n    });\r\n\r\n    let data = await request.delete(entity, itemId);\r\n\r\n    if (data.success === true) {\r\n      dispatch({\r\n        type: actionTypes.REQUEST_SUCCESS,\r\n        keyState: \"delete\",\r\n        payload: data.result,\r\n      });\r\n    } else {\r\n      dispatch({\r\n        type: actionTypes.REQUEST_FAILED,\r\n        keyState: \"delete\",\r\n        payload: null,\r\n      });\r\n    }\r\n  },\r\n\r\n  search: (entity, source, option) => async (dispatch) => {\r\n    dispatch({\r\n      type: actionTypes.REQUEST_LOADING,\r\n      keyState: \"search\",\r\n      payload: null,\r\n    });\r\n\r\n    source.cancel();\r\n\r\n    source = request.source();\r\n    let data = await request.search(entity, source, option);\r\n\r\n    if (data.success === true) {\r\n      dispatch({\r\n        type: actionTypes.REQUEST_SUCCESS,\r\n        keyState: \"search\",\r\n        payload: data.result,\r\n      });\r\n    } else {\r\n      dispatch({\r\n        type: actionTypes.REQUEST_FAILED,\r\n        keyState: \"search\",\r\n        payload: null,\r\n      });\r\n    }\r\n  },\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}